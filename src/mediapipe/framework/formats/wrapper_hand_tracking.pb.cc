// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/wrapper_hand_tracking.proto

#include "mediapipe/framework/formats/wrapper_hand_tracking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Detection_AssociatedDetection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Landmark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_BoundingBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_RelativeBoundingBox;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_RelativeKeypoint;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalizedLandmark;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NormalizedRect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Rasterization_Interval;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DetectionList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LocationData_BinaryMask;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NormalizedLandmarkList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Rasterization;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Detection;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_LocationData;
}  // namespace protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto
namespace mediapipe {
class LandmarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Landmark>
      _instance;
} _Landmark_default_instance_;
class LandmarkListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LandmarkList>
      _instance;
} _LandmarkList_default_instance_;
class NormalizedLandmarkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalizedLandmark>
      _instance;
} _NormalizedLandmark_default_instance_;
class NormalizedLandmarkListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalizedLandmarkList>
      _instance;
} _NormalizedLandmarkList_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rect>
      _instance;
} _Rect_default_instance_;
class NormalizedRectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalizedRect>
      _instance;
} _NormalizedRect_default_instance_;
class Rasterization_IntervalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rasterization_Interval>
      _instance;
} _Rasterization_Interval_default_instance_;
class RasterizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rasterization>
      _instance;
} _Rasterization_default_instance_;
class LocationData_BoundingBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationData_BoundingBox>
      _instance;
} _LocationData_BoundingBox_default_instance_;
class LocationData_RelativeBoundingBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationData_RelativeBoundingBox>
      _instance;
} _LocationData_RelativeBoundingBox_default_instance_;
class LocationData_BinaryMaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationData_BinaryMask>
      _instance;
} _LocationData_BinaryMask_default_instance_;
class LocationData_RelativeKeypointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationData_RelativeKeypoint>
      _instance;
} _LocationData_RelativeKeypoint_default_instance_;
class LocationDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationData>
      _instance;
} _LocationData_default_instance_;
class Detection_AssociatedDetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Detection_AssociatedDetection>
      _instance;
} _Detection_AssociatedDetection_default_instance_;
class DetectionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Detection>
      _instance;
} _Detection_default_instance_;
class DetectionListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DetectionList>
      _instance;
} _DetectionList_default_instance_;
class WrapperHandTrackingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WrapperHandTracking>
      _instance;
} _WrapperHandTracking_default_instance_;
}  // namespace mediapipe
namespace protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto {
static void InitDefaultsLandmark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Landmark_default_instance_;
    new (ptr) ::mediapipe::Landmark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Landmark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Landmark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLandmark}, {}};

static void InitDefaultsLandmarkList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LandmarkList_default_instance_;
    new (ptr) ::mediapipe::LandmarkList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LandmarkList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LandmarkList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLandmarkList}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Landmark.base,}};

static void InitDefaultsNormalizedLandmark() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmark_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NormalizedLandmark =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNormalizedLandmark}, {}};

static void InitDefaultsNormalizedLandmarkList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedLandmarkList_default_instance_;
    new (ptr) ::mediapipe::NormalizedLandmarkList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedLandmarkList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NormalizedLandmarkList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNormalizedLandmarkList}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmark.base,}};

static void InitDefaultsRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rect_default_instance_;
    new (ptr) ::mediapipe::Rect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRect}, {}};

static void InitDefaultsNormalizedRect() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_NormalizedRect_default_instance_;
    new (ptr) ::mediapipe::NormalizedRect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::NormalizedRect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NormalizedRect =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNormalizedRect}, {}};

static void InitDefaultsRasterization_Interval() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rasterization_Interval_default_instance_;
    new (ptr) ::mediapipe::Rasterization_Interval();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rasterization_Interval::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Rasterization_Interval =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRasterization_Interval}, {}};

static void InitDefaultsRasterization() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Rasterization_default_instance_;
    new (ptr) ::mediapipe::Rasterization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Rasterization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rasterization =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRasterization}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization_Interval.base,}};

static void InitDefaultsLocationData_BoundingBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_BoundingBox_default_instance_;
    new (ptr) ::mediapipe::LocationData_BoundingBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_BoundingBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_BoundingBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationData_BoundingBox}, {}};

static void InitDefaultsLocationData_RelativeBoundingBox() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_RelativeBoundingBox_default_instance_;
    new (ptr) ::mediapipe::LocationData_RelativeBoundingBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_RelativeBoundingBox::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_RelativeBoundingBox =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationData_RelativeBoundingBox}, {}};

static void InitDefaultsLocationData_BinaryMask() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_BinaryMask_default_instance_;
    new (ptr) ::mediapipe::LocationData_BinaryMask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_BinaryMask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LocationData_BinaryMask =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocationData_BinaryMask}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization.base,}};

static void InitDefaultsLocationData_RelativeKeypoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_RelativeKeypoint_default_instance_;
    new (ptr) ::mediapipe::LocationData_RelativeKeypoint();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData_RelativeKeypoint::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LocationData_RelativeKeypoint =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLocationData_RelativeKeypoint}, {}};

static void InitDefaultsLocationData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_LocationData_default_instance_;
    new (ptr) ::mediapipe::LocationData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::LocationData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_LocationData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsLocationData}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BoundingBox.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeBoundingBox.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BinaryMask.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeKeypoint.base,}};

static void InitDefaultsDetection_AssociatedDetection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Detection_AssociatedDetection_default_instance_;
    new (ptr) ::mediapipe::Detection_AssociatedDetection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Detection_AssociatedDetection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Detection_AssociatedDetection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDetection_AssociatedDetection}, {}};

static void InitDefaultsDetection() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_Detection_default_instance_;
    new (ptr) ::mediapipe::Detection();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::Detection::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Detection =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsDetection}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection_AssociatedDetection.base,}};

static void InitDefaultsDetectionList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_DetectionList_default_instance_;
    new (ptr) ::mediapipe::DetectionList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::DetectionList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DetectionList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDetectionList}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection.base,}};

static void InitDefaultsWrapperHandTracking() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mediapipe::_WrapperHandTracking_default_instance_;
    new (ptr) ::mediapipe::WrapperHandTracking();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mediapipe::WrapperHandTracking::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_WrapperHandTracking =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsWrapperHandTracking}, {
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmarkList.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedRect.base,
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_DetectionList.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Landmark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LandmarkList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalizedLandmark.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalizedLandmarkList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NormalizedRect.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rasterization_Interval.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rasterization.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationData_BoundingBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationData_RelativeBoundingBox.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationData_BinaryMask.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationData_RelativeKeypoint.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Detection_AssociatedDetection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Detection.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DetectionList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WrapperHandTracking.base);
}

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Landmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Landmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Landmark, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Landmark, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Landmark, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LandmarkList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LandmarkList, landmark_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmark, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmark, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmark, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedLandmarkList, landmark_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, x_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, y_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rect, rect_id_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, x_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, y_center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::NormalizedRect, rect_id_),
  0,
  1,
  2,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization_Interval, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization_Interval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization_Interval, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization_Interval, left_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization_Interval, right_x_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Rasterization, interval_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BoundingBox, height_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeBoundingBox, height_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_BinaryMask, rasterization_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, keypoint_label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData_RelativeKeypoint, score_),
  1,
  2,
  0,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, bounding_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, relative_bounding_box_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::LocationData, relative_keypoints_),
  3,
  0,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection_AssociatedDetection, confidence_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, label_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, label_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, location_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, feature_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, track_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, detection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, associated_detections_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::Detection, timestamp_usec_),
  ~0u,
  ~0u,
  ~0u,
  2,
  0,
  1,
  3,
  ~0u,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::DetectionList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::DetectionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::DetectionList, detection_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::WrapperHandTracking, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::WrapperHandTracking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::WrapperHandTracking, landmarks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::WrapperHandTracking, rect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::mediapipe::WrapperHandTracking, detection_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::mediapipe::Landmark)},
  { 11, 17, sizeof(::mediapipe::LandmarkList)},
  { 18, 26, sizeof(::mediapipe::NormalizedLandmark)},
  { 29, 35, sizeof(::mediapipe::NormalizedLandmarkList)},
  { 36, 47, sizeof(::mediapipe::Rect)},
  { 53, 64, sizeof(::mediapipe::NormalizedRect)},
  { 70, 78, sizeof(::mediapipe::Rasterization_Interval)},
  { 81, 87, sizeof(::mediapipe::Rasterization)},
  { 88, 97, sizeof(::mediapipe::LocationData_BoundingBox)},
  { 101, 110, sizeof(::mediapipe::LocationData_RelativeBoundingBox)},
  { 114, 122, sizeof(::mediapipe::LocationData_BinaryMask)},
  { 125, 134, sizeof(::mediapipe::LocationData_RelativeKeypoint)},
  { 138, 148, sizeof(::mediapipe::LocationData)},
  { 153, 160, sizeof(::mediapipe::Detection_AssociatedDetection)},
  { 162, 177, sizeof(::mediapipe::Detection)},
  { 187, 193, sizeof(::mediapipe::DetectionList)},
  { 194, 202, sizeof(::mediapipe::WrapperHandTracking)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Landmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LandmarkList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_NormalizedLandmark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_NormalizedLandmarkList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Rect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_NormalizedRect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Rasterization_Interval_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Rasterization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LocationData_BoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LocationData_RelativeBoundingBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LocationData_BinaryMask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LocationData_RelativeKeypoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_LocationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Detection_AssociatedDetection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_Detection_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_DetectionList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mediapipe::_WrapperHandTracking_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mediapipe/framework/formats/wrapper_hand_tracking.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n7mediapipe/framework/formats/wrapper_ha"
      "nd_tracking.proto\022\tmediapipe\"+\n\010Landmark"
      "\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"5\n\014Lan"
      "dmarkList\022%\n\010landmark\030\001 \003(\0132\023.mediapipe."
      "Landmark\"5\n\022NormalizedLandmark\022\t\n\001x\030\001 \001("
      "\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"I\n\026NormalizedLan"
      "dmarkList\022/\n\010landmark\030\001 \003(\0132\035.mediapipe."
      "NormalizedLandmark\"o\n\004Rect\022\020\n\010x_center\030\001"
      " \002(\005\022\020\n\010y_center\030\002 \002(\005\022\016\n\006height\030\003 \002(\005\022\r"
      "\n\005width\030\004 \002(\005\022\023\n\010rotation\030\005 \001(\002:\0010\022\017\n\007re"
      "ct_id\030\006 \001(\003\"y\n\016NormalizedRect\022\020\n\010x_cente"
      "r\030\001 \002(\002\022\020\n\010y_center\030\002 \002(\002\022\016\n\006height\030\003 \002("
      "\002\022\r\n\005width\030\004 \002(\002\022\023\n\010rotation\030\005 \001(\002:\0010\022\017\n"
      "\007rect_id\030\006 \001(\003\"|\n\rRasterization\0223\n\010inter"
      "val\030\001 \003(\0132!.mediapipe.Rasterization.Inte"
      "rval\0326\n\010Interval\022\t\n\001y\030\001 \002(\005\022\016\n\006left_x\030\002 "
      "\002(\005\022\017\n\007right_x\030\003 \002(\005\"\325\005\n\014LocationData\022.\n"
      "\006format\030\001 \001(\0162\036.mediapipe.LocationData.F"
      "ormat\0229\n\014bounding_box\030\002 \001(\0132#.mediapipe."
      "LocationData.BoundingBox\022J\n\025relative_bou"
      "nding_box\030\003 \001(\0132+.mediapipe.LocationData"
      ".RelativeBoundingBox\0220\n\004mask\030\004 \001(\0132\".med"
      "iapipe.LocationData.BinaryMask\022D\n\022relati"
      "ve_keypoints\030\005 \003(\0132(.mediapipe.LocationD"
      "ata.RelativeKeypoint\032H\n\013BoundingBox\022\014\n\004x"
      "min\030\001 \001(\005\022\014\n\004ymin\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016"
      "\n\006height\030\004 \001(\005\032P\n\023RelativeBoundingBox\022\014\n"
      "\004xmin\030\001 \001(\002\022\014\n\004ymin\030\002 \001(\002\022\r\n\005width\030\003 \001(\002"
      "\022\016\n\006height\030\004 \001(\002\032\\\n\nBinaryMask\022\r\n\005width\030"
      "\001 \001(\005\022\016\n\006height\030\002 \001(\005\022/\n\rrasterization\030\003"
      " \001(\0132\030.mediapipe.Rasterization\032O\n\020Relati"
      "veKeypoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\026\n\016keyp"
      "oint_label\030\003 \001(\t\022\r\n\005score\030\004 \001(\002\"K\n\006Forma"
      "t\022\n\n\006GLOBAL\020\000\022\020\n\014BOUNDING_BOX\020\001\022\031\n\025RELAT"
      "IVE_BOUNDING_BOX\020\002\022\010\n\004MASK\020\003\"\336\002\n\tDetecti"
      "on\022\r\n\005label\030\001 \003(\t\022\024\n\010label_id\030\002 \003(\005B\002\020\001\022"
      "\021\n\005score\030\003 \003(\002B\002\020\001\022.\n\rlocation_data\030\004 \001("
      "\0132\027.mediapipe.LocationData\022\023\n\013feature_ta"
      "g\030\005 \001(\t\022\020\n\010track_id\030\006 \001(\t\022\024\n\014detection_i"
      "d\030\007 \001(\003\022G\n\025associated_detections\030\010 \003(\0132("
      ".mediapipe.Detection.AssociatedDetection"
      "\022\024\n\014display_name\030\t \003(\t\022\026\n\016timestamp_usec"
      "\030\n \001(\003\0325\n\023AssociatedDetection\022\n\n\002id\030\001 \001("
      "\005\022\022\n\nconfidence\030\002 \001(\002\"8\n\rDetectionList\022\'"
      "\n\tdetection\030\001 \003(\0132\024.mediapipe.Detection\""
      "\241\001\n\023WrapperHandTracking\0224\n\tlandmarks\030\001 \001"
      "(\0132!.mediapipe.NormalizedLandmarkList\022\'\n"
      "\004rect\030\002 \001(\0132\031.mediapipe.NormalizedRect\022+"
      "\n\tdetection\030\003 \001(\0132\030.mediapipe.DetectionL"
      "ist"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1963);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mediapipe/framework/formats/wrapper_hand_tracking.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto
namespace mediapipe {
const ::google::protobuf::EnumDescriptor* LocationData_Format_descriptor() {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_enum_descriptors[0];
}
bool LocationData_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LocationData_Format LocationData::GLOBAL;
const LocationData_Format LocationData::BOUNDING_BOX;
const LocationData_Format LocationData::RELATIVE_BOUNDING_BOX;
const LocationData_Format LocationData::MASK;
const LocationData_Format LocationData::Format_MIN;
const LocationData_Format LocationData::Format_MAX;
const int LocationData::Format_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Landmark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Landmark::kXFieldNumber;
const int Landmark::kYFieldNumber;
const int Landmark::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Landmark::Landmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Landmark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Landmark)
}
Landmark::Landmark(const Landmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Landmark)
}

void Landmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Landmark::~Landmark() {
  // @@protoc_insertion_point(destructor:mediapipe.Landmark)
  SharedDtor();
}

void Landmark::SharedDtor() {
}

void Landmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Landmark::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Landmark& Landmark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Landmark.base);
  return *internal_default_instance();
}


void Landmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Landmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Landmark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Landmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Landmark)
  return false;
#undef DO_
}

void Landmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Landmark)
}

::google::protobuf::uint8* Landmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Landmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Landmark)
  return target;
}

size_t Landmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Landmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Landmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  const Landmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Landmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Landmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Landmark)
    MergeFrom(*source);
  }
}

void Landmark::MergeFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Landmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Landmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Landmark::CopyFrom(const Landmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Landmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Landmark::IsInitialized() const {
  return true;
}

void Landmark::Swap(Landmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Landmark::InternalSwap(Landmark* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Landmark::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LandmarkList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LandmarkList::kLandmarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LandmarkList::LandmarkList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LandmarkList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LandmarkList)
}
LandmarkList::LandmarkList(const LandmarkList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.LandmarkList)
}

void LandmarkList::SharedCtor() {
}

LandmarkList::~LandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.LandmarkList)
  SharedDtor();
}

void LandmarkList::SharedDtor() {
}

void LandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LandmarkList::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LandmarkList& LandmarkList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LandmarkList.base);
  return *internal_default_instance();
}


void LandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LandmarkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LandmarkList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mediapipe.Landmark landmark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LandmarkList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LandmarkList)
  return false;
#undef DO_
}

void LandmarkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->landmark(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LandmarkList)
}

::google::protobuf::uint8* LandmarkList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Landmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->landmark(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LandmarkList)
  return target;
}

size_t LandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LandmarkList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mediapipe.Landmark landmark = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmark(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LandmarkList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const LandmarkList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LandmarkList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LandmarkList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LandmarkList)
    MergeFrom(*source);
  }
}

void LandmarkList::MergeFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void LandmarkList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandmarkList::CopyFrom(const LandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandmarkList::IsInitialized() const {
  return true;
}

void LandmarkList::Swap(LandmarkList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LandmarkList::InternalSwap(LandmarkList* other) {
  using std::swap;
  CastToBase(&landmark_)->InternalSwap(CastToBase(&other->landmark_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LandmarkList::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalizedLandmark::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedLandmark::kXFieldNumber;
const int NormalizedLandmark::kYFieldNumber;
const int NormalizedLandmark::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedLandmark::NormalizedLandmark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmark.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.NormalizedLandmark)
}
NormalizedLandmark::NormalizedLandmark(const NormalizedLandmark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmark)
}

void NormalizedLandmark::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

NormalizedLandmark::~NormalizedLandmark() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmark)
  SharedDtor();
}

void NormalizedLandmark::SharedDtor() {
}

void NormalizedLandmark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalizedLandmark::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedLandmark& NormalizedLandmark::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmark.base);
  return *internal_default_instance();
}


void NormalizedLandmark::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizedLandmark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.NormalizedLandmark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.NormalizedLandmark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.NormalizedLandmark)
  return false;
#undef DO_
}

void NormalizedLandmark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.NormalizedLandmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.NormalizedLandmark)
}

::google::protobuf::uint8* NormalizedLandmark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmark)
  return target;
}

size_t NormalizedLandmark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedLandmark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmark)
    MergeFrom(*source);
  }
}

void NormalizedLandmark::MergeFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedLandmark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmark::CopyFrom(const NormalizedLandmark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmark::IsInitialized() const {
  return true;
}

void NormalizedLandmark::Swap(NormalizedLandmark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedLandmark::InternalSwap(NormalizedLandmark* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalizedLandmark::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalizedLandmarkList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedLandmarkList::kLandmarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedLandmarkList::NormalizedLandmarkList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmarkList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.NormalizedLandmarkList)
}
NormalizedLandmarkList::NormalizedLandmarkList(const NormalizedLandmarkList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      landmark_(from.landmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedLandmarkList)
}

void NormalizedLandmarkList::SharedCtor() {
}

NormalizedLandmarkList::~NormalizedLandmarkList() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedLandmarkList)
  SharedDtor();
}

void NormalizedLandmarkList::SharedDtor() {
}

void NormalizedLandmarkList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalizedLandmarkList::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedLandmarkList& NormalizedLandmarkList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedLandmarkList.base);
  return *internal_default_instance();
}


void NormalizedLandmarkList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedLandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmark_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizedLandmarkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.NormalizedLandmarkList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mediapipe.NormalizedLandmark landmark = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_landmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.NormalizedLandmarkList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.NormalizedLandmarkList)
  return false;
#undef DO_
}

void NormalizedLandmarkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.NormalizedLandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->landmark(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.NormalizedLandmarkList)
}

::google::protobuf::uint8* NormalizedLandmarkList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedLandmarkList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->landmark_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->landmark(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedLandmarkList)
  return target;
}

size_t NormalizedLandmarkList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedLandmarkList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mediapipe.NormalizedLandmark landmark = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->landmark_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->landmark(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedLandmarkList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedLandmarkList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedLandmarkList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedLandmarkList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedLandmarkList)
    MergeFrom(*source);
  }
}

void NormalizedLandmarkList::MergeFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedLandmarkList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmark_.MergeFrom(from.landmark_);
}

void NormalizedLandmarkList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedLandmarkList::CopyFrom(const NormalizedLandmarkList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedLandmarkList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedLandmarkList::IsInitialized() const {
  return true;
}

void NormalizedLandmarkList::Swap(NormalizedLandmarkList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedLandmarkList::InternalSwap(NormalizedLandmarkList* other) {
  using std::swap;
  CastToBase(&landmark_)->InternalSwap(CastToBase(&other->landmark_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalizedLandmarkList::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXCenterFieldNumber;
const int Rect::kYCenterFieldNumber;
const int Rect::kHeightFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kRotationFieldNumber;
const int Rect::kRectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:mediapipe.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rect.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&x_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Rect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x_center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_x_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y_center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_y_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rotation = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rect_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_center(), output);
  }

  // required int32 y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y_center(), output);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // required int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->width(), output);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rect_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x_center(), target);
  }

  // required int32 y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y_center(), target);
  }

  // required int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // required int32 width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->width(), target);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rect_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rect)
  return target;
}

size_t Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.Rect)
  size_t total_size = 0;

  if (has_x_center()) {
    // required int32 x_center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_center());
  }

  if (has_y_center()) {
    // required int32 y_center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_center());
  }

  if (has_height()) {
    // required int32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  return total_size;
}
size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x_center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_center());

    // required int32 y_center = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_center());

    // required int32 height = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional int64 rect_id = 6;
    if (has_rect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rect_id());
    }

    // optional float rotation = 5 [default = 0];
    if (has_rotation()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      x_center_ = from.x_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_center_ = from.y_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      rect_id_ = from.rect_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  using std::swap;
  swap(x_center_, other->x_center_);
  swap(y_center_, other->y_center_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(rect_id_, other->rect_id_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalizedRect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalizedRect::kXCenterFieldNumber;
const int NormalizedRect::kYCenterFieldNumber;
const int NormalizedRect::kHeightFieldNumber;
const int NormalizedRect::kWidthFieldNumber;
const int NormalizedRect::kRotationFieldNumber;
const int NormalizedRect::kRectIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalizedRect::NormalizedRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedRect.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.NormalizedRect)
}
NormalizedRect::NormalizedRect(const NormalizedRect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_center_, &from.x_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.NormalizedRect)
}

void NormalizedRect::SharedCtor() {
  ::memset(&x_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
}

NormalizedRect::~NormalizedRect() {
  // @@protoc_insertion_point(destructor:mediapipe.NormalizedRect)
  SharedDtor();
}

void NormalizedRect::SharedDtor() {
}

void NormalizedRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NormalizedRect::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalizedRect& NormalizedRect::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_NormalizedRect.base);
  return *internal_default_instance();
}


void NormalizedRect::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.NormalizedRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&x_center_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rotation_) -
        reinterpret_cast<char*>(&x_center_)) + sizeof(rotation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NormalizedRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.NormalizedRect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x_center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y_center = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float width = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rotation = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rect_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_rect_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rect_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.NormalizedRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.NormalizedRect)
  return false;
#undef DO_
}

void NormalizedRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.NormalizedRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_center(), output);
  }

  // required float y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_center(), output);
  }

  // required float height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // required float width = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->width(), output);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rect_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.NormalizedRect)
}

::google::protobuf::uint8* NormalizedRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.NormalizedRect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x_center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_center(), target);
  }

  // required float y_center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_center(), target);
  }

  // required float height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // required float width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->width(), target);
  }

  // optional float rotation = 5 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rotation(), target);
  }

  // optional int64 rect_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rect_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.NormalizedRect)
  return target;
}

size_t NormalizedRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.NormalizedRect)
  size_t total_size = 0;

  if (has_x_center()) {
    // required float x_center = 1;
    total_size += 1 + 4;
  }

  if (has_y_center()) {
    // required float y_center = 2;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 3;
    total_size += 1 + 4;
  }

  if (has_width()) {
    // required float width = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t NormalizedRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.NormalizedRect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x_center = 1;
    total_size += 1 + 4;

    // required float y_center = 2;
    total_size += 1 + 4;

    // required float height = 3;
    total_size += 1 + 4;

    // required float width = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 48u) {
    // optional int64 rect_id = 6;
    if (has_rect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rect_id());
    }

    // optional float rotation = 5 [default = 0];
    if (has_rotation()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalizedRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.NormalizedRect)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalizedRect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalizedRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.NormalizedRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.NormalizedRect)
    MergeFrom(*source);
  }
}

void NormalizedRect::MergeFrom(const NormalizedRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.NormalizedRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      x_center_ = from.x_center_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_center_ = from.y_center_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000010u) {
      rect_id_ = from.rect_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rotation_ = from.rotation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NormalizedRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.NormalizedRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalizedRect::CopyFrom(const NormalizedRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.NormalizedRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalizedRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void NormalizedRect::Swap(NormalizedRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalizedRect::InternalSwap(NormalizedRect* other) {
  using std::swap;
  swap(x_center_, other->x_center_);
  swap(y_center_, other->y_center_);
  swap(height_, other->height_);
  swap(width_, other->width_);
  swap(rect_id_, other->rect_id_);
  swap(rotation_, other->rotation_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NormalizedRect::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rasterization_Interval::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rasterization_Interval::kYFieldNumber;
const int Rasterization_Interval::kLeftXFieldNumber;
const int Rasterization_Interval::kRightXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rasterization_Interval::Rasterization_Interval()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization_Interval.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Rasterization.Interval)
}
Rasterization_Interval::Rasterization_Interval(const Rasterization_Interval& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&y_, &from.y_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_x_) -
    reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rasterization.Interval)
}

void Rasterization_Interval::SharedCtor() {
  ::memset(&y_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_x_) -
      reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
}

Rasterization_Interval::~Rasterization_Interval() {
  // @@protoc_insertion_point(destructor:mediapipe.Rasterization.Interval)
  SharedDtor();
}

void Rasterization_Interval::SharedDtor() {
}

void Rasterization_Interval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rasterization_Interval::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rasterization_Interval& Rasterization_Interval::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization_Interval.base);
  return *internal_default_instance();
}


void Rasterization_Interval::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rasterization.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&y_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_x_) -
        reinterpret_cast<char*>(&y_)) + sizeof(right_x_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rasterization_Interval::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Rasterization.Interval)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 y = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 left_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_left_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 right_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_right_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Rasterization.Interval)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Rasterization.Interval)
  return false;
#undef DO_
}

void Rasterization_Interval::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Rasterization.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 y = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->y(), output);
  }

  // required int32 left_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_x(), output);
  }

  // required int32 right_x = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right_x(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Rasterization.Interval)
}

::google::protobuf::uint8* Rasterization_Interval::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rasterization.Interval)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 y = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->y(), target);
  }

  // required int32 left_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_x(), target);
  }

  // required int32 right_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right_x(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rasterization.Interval)
  return target;
}

size_t Rasterization_Interval::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mediapipe.Rasterization.Interval)
  size_t total_size = 0;

  if (has_y()) {
    // required int32 y = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_left_x()) {
    // required int32 left_x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_x());
  }

  if (has_right_x()) {
    // required int32 right_x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_x());
  }

  return total_size;
}
size_t Rasterization_Interval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rasterization.Interval)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 y = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 left_x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left_x());

    // required int32 right_x = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right_x());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rasterization_Interval::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rasterization.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  const Rasterization_Interval* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rasterization_Interval>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rasterization.Interval)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rasterization.Interval)
    MergeFrom(*source);
  }
}

void Rasterization_Interval::MergeFrom(const Rasterization_Interval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rasterization.Interval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_x_ = from.left_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_x_ = from.right_x_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rasterization_Interval::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rasterization.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rasterization_Interval::CopyFrom(const Rasterization_Interval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rasterization.Interval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rasterization_Interval::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Rasterization_Interval::Swap(Rasterization_Interval* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rasterization_Interval::InternalSwap(Rasterization_Interval* other) {
  using std::swap;
  swap(y_, other->y_);
  swap(left_x_, other->left_x_);
  swap(right_x_, other->right_x_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rasterization_Interval::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rasterization::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rasterization::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rasterization::Rasterization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Rasterization)
}
Rasterization::Rasterization(const Rasterization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      interval_(from.interval_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.Rasterization)
}

void Rasterization::SharedCtor() {
}

Rasterization::~Rasterization() {
  // @@protoc_insertion_point(destructor:mediapipe.Rasterization)
  SharedDtor();
}

void Rasterization::SharedDtor() {
}

void Rasterization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rasterization::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rasterization& Rasterization::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Rasterization.base);
  return *internal_default_instance();
}


void Rasterization::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Rasterization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interval_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rasterization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Rasterization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mediapipe.Rasterization.Interval interval = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_interval()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Rasterization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Rasterization)
  return false;
#undef DO_
}

void Rasterization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Rasterization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Rasterization.Interval interval = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interval_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->interval(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Rasterization)
}

::google::protobuf::uint8* Rasterization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Rasterization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Rasterization.Interval interval = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->interval_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->interval(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Rasterization)
  return target;
}

size_t Rasterization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Rasterization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mediapipe.Rasterization.Interval interval = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->interval_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->interval(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rasterization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Rasterization)
  GOOGLE_DCHECK_NE(&from, this);
  const Rasterization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rasterization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Rasterization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Rasterization)
    MergeFrom(*source);
  }
}

void Rasterization::MergeFrom(const Rasterization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Rasterization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interval_.MergeFrom(from.interval_);
}

void Rasterization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Rasterization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rasterization::CopyFrom(const Rasterization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Rasterization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rasterization::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->interval())) return false;
  return true;
}

void Rasterization::Swap(Rasterization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rasterization::InternalSwap(Rasterization* other) {
  using std::swap;
  CastToBase(&interval_)->InternalSwap(CastToBase(&other->interval_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rasterization::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationData_BoundingBox::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationData_BoundingBox::kXminFieldNumber;
const int LocationData_BoundingBox::kYminFieldNumber;
const int LocationData_BoundingBox::kWidthFieldNumber;
const int LocationData_BoundingBox::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationData_BoundingBox::LocationData_BoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BoundingBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LocationData.BoundingBox)
}
LocationData_BoundingBox::LocationData_BoundingBox(const LocationData_BoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.BoundingBox)
}

void LocationData_BoundingBox::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
}

LocationData_BoundingBox::~LocationData_BoundingBox() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.BoundingBox)
  SharedDtor();
}

void LocationData_BoundingBox::SharedDtor() {
}

void LocationData_BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationData_BoundingBox::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationData_BoundingBox& LocationData_BoundingBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BoundingBox.base);
  return *internal_default_instance();
}


void LocationData_BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationData_BoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LocationData.BoundingBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LocationData.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LocationData.BoundingBox)
  return false;
#undef DO_
}

void LocationData_BoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LocationData.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xmin(), output);
  }

  // optional int32 ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ymin(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LocationData.BoundingBox)
}

::google::protobuf::uint8* LocationData_BoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.BoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xmin(), target);
  }

  // optional int32 ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ymin(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.BoundingBox)
  return target;
}

size_t LocationData_BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.BoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 xmin = 1;
    if (has_xmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xmin());
    }

    // optional int32 ymin = 2;
    if (has_ymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ymin());
    }

    // optional int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_BoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_BoundingBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationData_BoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.BoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.BoundingBox)
    MergeFrom(*source);
  }
}

void LocationData_BoundingBox::MergeFrom(const LocationData_BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_BoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_BoundingBox::CopyFrom(const LocationData_BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_BoundingBox::IsInitialized() const {
  return true;
}

void LocationData_BoundingBox::Swap(LocationData_BoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationData_BoundingBox::InternalSwap(LocationData_BoundingBox* other) {
  using std::swap;
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationData_BoundingBox::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationData_RelativeBoundingBox::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationData_RelativeBoundingBox::kXminFieldNumber;
const int LocationData_RelativeBoundingBox::kYminFieldNumber;
const int LocationData_RelativeBoundingBox::kWidthFieldNumber;
const int LocationData_RelativeBoundingBox::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationData_RelativeBoundingBox::LocationData_RelativeBoundingBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeBoundingBox.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LocationData.RelativeBoundingBox)
}
LocationData_RelativeBoundingBox::LocationData_RelativeBoundingBox(const LocationData_RelativeBoundingBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.RelativeBoundingBox)
}

void LocationData_RelativeBoundingBox::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
}

LocationData_RelativeBoundingBox::~LocationData_RelativeBoundingBox() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.RelativeBoundingBox)
  SharedDtor();
}

void LocationData_RelativeBoundingBox::SharedDtor() {
}

void LocationData_RelativeBoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationData_RelativeBoundingBox::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationData_RelativeBoundingBox& LocationData_RelativeBoundingBox::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeBoundingBox.base);
  return *internal_default_instance();
}


void LocationData_RelativeBoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.RelativeBoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&xmin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&xmin_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationData_RelativeBoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LocationData.RelativeBoundingBox)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_xmin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ymin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_ymin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LocationData.RelativeBoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LocationData.RelativeBoundingBox)
  return false;
#undef DO_
}

void LocationData_RelativeBoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LocationData.RelativeBoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xmin(), output);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ymin(), output);
  }

  // optional float width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->width(), output);
  }

  // optional float height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LocationData.RelativeBoundingBox)
}

::google::protobuf::uint8* LocationData_RelativeBoundingBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.RelativeBoundingBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xmin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xmin(), target);
  }

  // optional float ymin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ymin(), target);
  }

  // optional float width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->width(), target);
  }

  // optional float height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.RelativeBoundingBox)
  return target;
}

size_t LocationData_RelativeBoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.RelativeBoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float xmin = 1;
    if (has_xmin()) {
      total_size += 1 + 4;
    }

    // optional float ymin = 2;
    if (has_ymin()) {
      total_size += 1 + 4;
    }

    // optional float width = 3;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_RelativeBoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.RelativeBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_RelativeBoundingBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationData_RelativeBoundingBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.RelativeBoundingBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.RelativeBoundingBox)
    MergeFrom(*source);
  }
}

void LocationData_RelativeBoundingBox::MergeFrom(const LocationData_RelativeBoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.RelativeBoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      xmin_ = from.xmin_;
    }
    if (cached_has_bits & 0x00000002u) {
      ymin_ = from.ymin_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_RelativeBoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.RelativeBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_RelativeBoundingBox::CopyFrom(const LocationData_RelativeBoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.RelativeBoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_RelativeBoundingBox::IsInitialized() const {
  return true;
}

void LocationData_RelativeBoundingBox::Swap(LocationData_RelativeBoundingBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationData_RelativeBoundingBox::InternalSwap(LocationData_RelativeBoundingBox* other) {
  using std::swap;
  swap(xmin_, other->xmin_);
  swap(ymin_, other->ymin_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationData_RelativeBoundingBox::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationData_BinaryMask::InitAsDefaultInstance() {
  ::mediapipe::_LocationData_BinaryMask_default_instance_._instance.get_mutable()->rasterization_ = const_cast< ::mediapipe::Rasterization*>(
      ::mediapipe::Rasterization::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationData_BinaryMask::kWidthFieldNumber;
const int LocationData_BinaryMask::kHeightFieldNumber;
const int LocationData_BinaryMask::kRasterizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationData_BinaryMask::LocationData_BinaryMask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BinaryMask.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LocationData.BinaryMask)
}
LocationData_BinaryMask::LocationData_BinaryMask(const LocationData_BinaryMask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rasterization()) {
    rasterization_ = new ::mediapipe::Rasterization(*from.rasterization_);
  } else {
    rasterization_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.BinaryMask)
}

void LocationData_BinaryMask::SharedCtor() {
  ::memset(&rasterization_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&rasterization_)) + sizeof(height_));
}

LocationData_BinaryMask::~LocationData_BinaryMask() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.BinaryMask)
  SharedDtor();
}

void LocationData_BinaryMask::SharedDtor() {
  if (this != internal_default_instance()) delete rasterization_;
}

void LocationData_BinaryMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationData_BinaryMask::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationData_BinaryMask& LocationData_BinaryMask::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_BinaryMask.base);
  return *internal_default_instance();
}


void LocationData_BinaryMask::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.BinaryMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rasterization_ != NULL);
    rasterization_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationData_BinaryMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LocationData.BinaryMask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.Rasterization rasterization = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rasterization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LocationData.BinaryMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LocationData.BinaryMask)
  return false;
#undef DO_
}

void LocationData_BinaryMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LocationData.BinaryMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional .mediapipe.Rasterization rasterization = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_rasterization(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LocationData.BinaryMask)
}

::google::protobuf::uint8* LocationData_BinaryMask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.BinaryMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional .mediapipe.Rasterization rasterization = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_rasterization(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.BinaryMask)
  return target;
}

size_t LocationData_BinaryMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.BinaryMask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .mediapipe.Rasterization rasterization = 3;
    if (has_rasterization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rasterization_);
    }

    // optional int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_BinaryMask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.BinaryMask)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_BinaryMask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationData_BinaryMask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.BinaryMask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.BinaryMask)
    MergeFrom(*source);
  }
}

void LocationData_BinaryMask::MergeFrom(const LocationData_BinaryMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.BinaryMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rasterization()->::mediapipe::Rasterization::MergeFrom(from.rasterization());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_BinaryMask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.BinaryMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_BinaryMask::CopyFrom(const LocationData_BinaryMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.BinaryMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_BinaryMask::IsInitialized() const {
  if (has_rasterization()) {
    if (!this->rasterization_->IsInitialized()) return false;
  }
  return true;
}

void LocationData_BinaryMask::Swap(LocationData_BinaryMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationData_BinaryMask::InternalSwap(LocationData_BinaryMask* other) {
  using std::swap;
  swap(rasterization_, other->rasterization_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationData_BinaryMask::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationData_RelativeKeypoint::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationData_RelativeKeypoint::kXFieldNumber;
const int LocationData_RelativeKeypoint::kYFieldNumber;
const int LocationData_RelativeKeypoint::kKeypointLabelFieldNumber;
const int LocationData_RelativeKeypoint::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationData_RelativeKeypoint::LocationData_RelativeKeypoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeKeypoint.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LocationData.RelativeKeypoint)
}
LocationData_RelativeKeypoint::LocationData_RelativeKeypoint(const LocationData_RelativeKeypoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keypoint_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keypoint_label()) {
    keypoint_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keypoint_label_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&x_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData.RelativeKeypoint)
}

void LocationData_RelativeKeypoint::SharedCtor() {
  keypoint_label_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&x_)) + sizeof(score_));
}

LocationData_RelativeKeypoint::~LocationData_RelativeKeypoint() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData.RelativeKeypoint)
  SharedDtor();
}

void LocationData_RelativeKeypoint::SharedDtor() {
  keypoint_label_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocationData_RelativeKeypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationData_RelativeKeypoint::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationData_RelativeKeypoint& LocationData_RelativeKeypoint::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData_RelativeKeypoint.base);
  return *internal_default_instance();
}


void LocationData_RelativeKeypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData.RelativeKeypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    keypoint_label_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 14u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_) -
        reinterpret_cast<char*>(&x_)) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationData_RelativeKeypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LocationData.RelativeKeypoint)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string keypoint_label = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keypoint_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keypoint_label().data(), static_cast<int>(this->keypoint_label().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediapipe.LocationData.RelativeKeypoint.keypoint_label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LocationData.RelativeKeypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LocationData.RelativeKeypoint)
  return false;
#undef DO_
}

void LocationData_RelativeKeypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LocationData.RelativeKeypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional string keypoint_label = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keypoint_label().data(), static_cast<int>(this->keypoint_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.LocationData.RelativeKeypoint.keypoint_label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->keypoint_label(), output);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LocationData.RelativeKeypoint)
}

::google::protobuf::uint8* LocationData_RelativeKeypoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData.RelativeKeypoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional string keypoint_label = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keypoint_label().data(), static_cast<int>(this->keypoint_label().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.LocationData.RelativeKeypoint.keypoint_label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->keypoint_label(), target);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData.RelativeKeypoint)
  return target;
}

size_t LocationData_RelativeKeypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData.RelativeKeypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string keypoint_label = 3;
    if (has_keypoint_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keypoint_label());
    }

    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float score = 4;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData_RelativeKeypoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData.RelativeKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData_RelativeKeypoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationData_RelativeKeypoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData.RelativeKeypoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData.RelativeKeypoint)
    MergeFrom(*source);
  }
}

void LocationData_RelativeKeypoint::MergeFrom(const LocationData_RelativeKeypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData.RelativeKeypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keypoint_label();
      keypoint_label_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keypoint_label_);
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData_RelativeKeypoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData.RelativeKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData_RelativeKeypoint::CopyFrom(const LocationData_RelativeKeypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData.RelativeKeypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData_RelativeKeypoint::IsInitialized() const {
  return true;
}

void LocationData_RelativeKeypoint::Swap(LocationData_RelativeKeypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationData_RelativeKeypoint::InternalSwap(LocationData_RelativeKeypoint* other) {
  using std::swap;
  keypoint_label_.Swap(&other->keypoint_label_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(score_, other->score_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationData_RelativeKeypoint::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationData::InitAsDefaultInstance() {
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::mediapipe::LocationData_BoundingBox*>(
      ::mediapipe::LocationData_BoundingBox::internal_default_instance());
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->relative_bounding_box_ = const_cast< ::mediapipe::LocationData_RelativeBoundingBox*>(
      ::mediapipe::LocationData_RelativeBoundingBox::internal_default_instance());
  ::mediapipe::_LocationData_default_instance_._instance.get_mutable()->mask_ = const_cast< ::mediapipe::LocationData_BinaryMask*>(
      ::mediapipe::LocationData_BinaryMask::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationData::kFormatFieldNumber;
const int LocationData::kBoundingBoxFieldNumber;
const int LocationData::kRelativeBoundingBoxFieldNumber;
const int LocationData::kMaskFieldNumber;
const int LocationData::kRelativeKeypointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationData::LocationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.LocationData)
}
LocationData::LocationData(const LocationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      relative_keypoints_(from.relative_keypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_bounding_box()) {
    bounding_box_ = new ::mediapipe::LocationData_BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = NULL;
  }
  if (from.has_relative_bounding_box()) {
    relative_bounding_box_ = new ::mediapipe::LocationData_RelativeBoundingBox(*from.relative_bounding_box_);
  } else {
    relative_bounding_box_ = NULL;
  }
  if (from.has_mask()) {
    mask_ = new ::mediapipe::LocationData_BinaryMask(*from.mask_);
  } else {
    mask_ = NULL;
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:mediapipe.LocationData)
}

void LocationData::SharedCtor() {
  ::memset(&bounding_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&bounding_box_)) + sizeof(format_));
}

LocationData::~LocationData() {
  // @@protoc_insertion_point(destructor:mediapipe.LocationData)
  SharedDtor();
}

void LocationData::SharedDtor() {
  if (this != internal_default_instance()) delete bounding_box_;
  if (this != internal_default_instance()) delete relative_bounding_box_;
  if (this != internal_default_instance()) delete mask_;
}

void LocationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationData::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationData& LocationData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_LocationData.base);
  return *internal_default_instance();
}


void LocationData::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.LocationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relative_keypoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bounding_box_ != NULL);
      bounding_box_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(relative_bounding_box_ != NULL);
      relative_bounding_box_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mask_ != NULL);
      mask_->Clear();
    }
  }
  format_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.LocationData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mediapipe.LocationData.Format format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mediapipe::LocationData_Format_IsValid(value)) {
            set_format(static_cast< ::mediapipe::LocationData_Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.LocationData.BinaryMask mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_relative_keypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.LocationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.LocationData)
  return false;
#undef DO_
}

void LocationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.LocationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData.Format format = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_bounding_box(), output);
  }

  // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_relative_bounding_box(), output);
  }

  // optional .mediapipe.LocationData.BinaryMask mask = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_mask(), output);
  }

  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relative_keypoints_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->relative_keypoints(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.LocationData)
}

::google::protobuf::uint8* LocationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.LocationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData.Format format = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_bounding_box(), deterministic, target);
  }

  // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_relative_bounding_box(), deterministic, target);
  }

  // optional .mediapipe.LocationData.BinaryMask mask = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_mask(), deterministic, target);
  }

  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->relative_keypoints_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->relative_keypoints(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.LocationData)
  return target;
}

size_t LocationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.LocationData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mediapipe.LocationData.RelativeKeypoint relative_keypoints = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->relative_keypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->relative_keypoints(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .mediapipe.LocationData.BoundingBox bounding_box = 2;
    if (has_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bounding_box_);
    }

    // optional .mediapipe.LocationData.RelativeBoundingBox relative_bounding_box = 3;
    if (has_relative_bounding_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *relative_bounding_box_);
    }

    // optional .mediapipe.LocationData.BinaryMask mask = 4;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *mask_);
    }

    // optional .mediapipe.LocationData.Format format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.LocationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.LocationData)
    MergeFrom(*source);
  }
}

void LocationData::MergeFrom(const LocationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.LocationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relative_keypoints_.MergeFrom(from.relative_keypoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_bounding_box()->::mediapipe::LocationData_BoundingBox::MergeFrom(from.bounding_box());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_relative_bounding_box()->::mediapipe::LocationData_RelativeBoundingBox::MergeFrom(from.relative_bounding_box());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_mask()->::mediapipe::LocationData_BinaryMask::MergeFrom(from.mask());
    }
    if (cached_has_bits & 0x00000008u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationData::CopyFrom(const LocationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.LocationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationData::IsInitialized() const {
  if (has_mask()) {
    if (!this->mask_->IsInitialized()) return false;
  }
  return true;
}

void LocationData::Swap(LocationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationData::InternalSwap(LocationData* other) {
  using std::swap;
  CastToBase(&relative_keypoints_)->InternalSwap(CastToBase(&other->relative_keypoints_));
  swap(bounding_box_, other->bounding_box_);
  swap(relative_bounding_box_, other->relative_bounding_box_);
  swap(mask_, other->mask_);
  swap(format_, other->format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationData::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Detection_AssociatedDetection::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Detection_AssociatedDetection::kIdFieldNumber;
const int Detection_AssociatedDetection::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Detection_AssociatedDetection::Detection_AssociatedDetection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection_AssociatedDetection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Detection.AssociatedDetection)
}
Detection_AssociatedDetection::Detection_AssociatedDetection(const Detection_AssociatedDetection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Detection.AssociatedDetection)
}

void Detection_AssociatedDetection::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
}

Detection_AssociatedDetection::~Detection_AssociatedDetection() {
  // @@protoc_insertion_point(destructor:mediapipe.Detection.AssociatedDetection)
  SharedDtor();
}

void Detection_AssociatedDetection::SharedDtor() {
}

void Detection_AssociatedDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Detection_AssociatedDetection::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Detection_AssociatedDetection& Detection_AssociatedDetection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection_AssociatedDetection.base);
  return *internal_default_instance();
}


void Detection_AssociatedDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Detection.AssociatedDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&confidence_) -
        reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Detection_AssociatedDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Detection.AssociatedDetection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float confidence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Detection.AssociatedDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Detection.AssociatedDetection)
  return false;
#undef DO_
}

void Detection_AssociatedDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Detection.AssociatedDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Detection.AssociatedDetection)
}

::google::protobuf::uint8* Detection_AssociatedDetection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Detection.AssociatedDetection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Detection.AssociatedDetection)
  return target;
}

size_t Detection_AssociatedDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Detection.AssociatedDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float confidence = 2;
    if (has_confidence()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection_AssociatedDetection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Detection.AssociatedDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection_AssociatedDetection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Detection_AssociatedDetection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Detection.AssociatedDetection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Detection.AssociatedDetection)
    MergeFrom(*source);
  }
}

void Detection_AssociatedDetection::MergeFrom(const Detection_AssociatedDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Detection.AssociatedDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detection_AssociatedDetection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Detection.AssociatedDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection_AssociatedDetection::CopyFrom(const Detection_AssociatedDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Detection.AssociatedDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection_AssociatedDetection::IsInitialized() const {
  return true;
}

void Detection_AssociatedDetection::Swap(Detection_AssociatedDetection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Detection_AssociatedDetection::InternalSwap(Detection_AssociatedDetection* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(confidence_, other->confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Detection_AssociatedDetection::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Detection::InitAsDefaultInstance() {
  ::mediapipe::_Detection_default_instance_._instance.get_mutable()->location_data_ = const_cast< ::mediapipe::LocationData*>(
      ::mediapipe::LocationData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Detection::kLabelFieldNumber;
const int Detection::kLabelIdFieldNumber;
const int Detection::kScoreFieldNumber;
const int Detection::kLocationDataFieldNumber;
const int Detection::kFeatureTagFieldNumber;
const int Detection::kTrackIdFieldNumber;
const int Detection::kDetectionIdFieldNumber;
const int Detection::kAssociatedDetectionsFieldNumber;
const int Detection::kDisplayNameFieldNumber;
const int Detection::kTimestampUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Detection::Detection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.Detection)
}
Detection::Detection(const Detection& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      label_(from.label_),
      label_id_(from.label_id_),
      score_(from.score_),
      associated_detections_(from.associated_detections_),
      display_name_(from.display_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_feature_tag()) {
    feature_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_tag_);
  }
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_track_id()) {
    track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from.has_location_data()) {
    location_data_ = new ::mediapipe::LocationData(*from.location_data_);
  } else {
    location_data_ = NULL;
  }
  ::memcpy(&detection_id_, &from.detection_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_usec_) -
    reinterpret_cast<char*>(&detection_id_)) + sizeof(timestamp_usec_));
  // @@protoc_insertion_point(copy_constructor:mediapipe.Detection)
}

void Detection::SharedCtor() {
  feature_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_usec_) -
      reinterpret_cast<char*>(&location_data_)) + sizeof(timestamp_usec_));
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:mediapipe.Detection)
  SharedDtor();
}

void Detection::SharedDtor() {
  feature_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  track_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_data_;
}

void Detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Detection::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Detection& Detection::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_Detection.base);
  return *internal_default_instance();
}


void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.Detection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.Clear();
  label_id_.Clear();
  score_.Clear();
  associated_detections_.Clear();
  display_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      feature_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      track_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(location_data_ != NULL);
      location_data_->Clear();
    }
  }
  if (cached_has_bits & 24u) {
    ::memset(&detection_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_usec_) -
        reinterpret_cast<char*>(&detection_id_)) + sizeof(timestamp_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Detection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.Detection)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string label = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label(this->label_size() - 1).data(),
            static_cast<int>(this->label(this->label_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediapipe.Detection.label");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 label_id = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_label_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_label_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float score = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.LocationData location_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string feature_tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feature_tag().data(), static_cast<int>(this->feature_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediapipe.Detection.feature_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string track_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->track_id().data(), static_cast<int>(this->track_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediapipe.Detection.track_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 detection_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_detection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &detection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_associated_detections()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string display_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name(this->display_name_size() - 1).data(),
            static_cast<int>(this->display_name(this->display_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mediapipe.Detection.display_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp_usec = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_timestamp_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.Detection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.Detection)
  return false;
#undef DO_
}

void Detection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.Detection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label(i).data(), static_cast<int>(this->label(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.label");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(i), output);
  }

  // repeated int32 label_id = 2 [packed = true];
  if (this->label_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _label_id_cached_byte_size_));
  }
  for (int i = 0, n = this->label_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->label_id(i), output);
  }

  // repeated float score = 3 [packed = true];
  if (this->score_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _score_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->score().data(), this->score_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData location_data = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_location_data(), output);
  }

  // optional string feature_tag = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_tag().data(), static_cast<int>(this->feature_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.feature_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->feature_tag(), output);
  }

  // optional string track_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.track_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->track_id(), output);
  }

  // optional int64 detection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->detection_id(), output);
  }

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->associated_detections_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->associated_detections(static_cast<int>(i)),
      output);
  }

  // repeated string display_name = 9;
  for (int i = 0, n = this->display_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name(i).data(), static_cast<int>(this->display_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->display_name(i), output);
  }

  // optional int64 timestamp_usec = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp_usec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.Detection)
}

::google::protobuf::uint8* Detection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.Detection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string label = 1;
  for (int i = 0, n = this->label_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label(i).data(), static_cast<int>(this->label(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.label");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->label(i), target);
  }

  // repeated int32 label_id = 2 [packed = true];
  if (this->label_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _label_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->label_id_, target);
  }

  // repeated float score = 3 [packed = true];
  if (this->score_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _score_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->score_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.LocationData location_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_location_data(), deterministic, target);
  }

  // optional string feature_tag = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feature_tag().data(), static_cast<int>(this->feature_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.feature_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->feature_tag(), target);
  }

  // optional string track_id = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->track_id().data(), static_cast<int>(this->track_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.track_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->track_id(), target);
  }

  // optional int64 detection_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->detection_id(), target);
  }

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->associated_detections_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->associated_detections(static_cast<int>(i)), deterministic, target);
  }

  // repeated string display_name = 9;
  for (int i = 0, n = this->display_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name(i).data(), static_cast<int>(this->display_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mediapipe.Detection.display_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->display_name(i), target);
  }

  // optional int64 timestamp_usec = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp_usec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.Detection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string label = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->label_size());
  for (int i = 0, n = this->label_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->label(i));
  }

  // repeated int32 label_id = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->label_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _label_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float score = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->score_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _score_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .mediapipe.Detection.AssociatedDetection associated_detections = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->associated_detections_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->associated_detections(static_cast<int>(i)));
    }
  }

  // repeated string display_name = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->display_name_size());
  for (int i = 0, n = this->display_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->display_name(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string feature_tag = 5;
    if (has_feature_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_tag());
    }

    // optional string track_id = 6;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }

    // optional .mediapipe.LocationData location_data = 4;
    if (has_location_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_data_);
    }

    // optional int64 detection_id = 7;
    if (has_detection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->detection_id());
    }

    // optional int64 timestamp_usec = 10;
    if (has_timestamp_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Detection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  const Detection* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Detection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.Detection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.Detection)
    MergeFrom(*source);
  }
}

void Detection::MergeFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  label_.MergeFrom(from.label_);
  label_id_.MergeFrom(from.label_id_);
  score_.MergeFrom(from.score_);
  associated_detections_.MergeFrom(from.associated_detections_);
  display_name_.MergeFrom(from.display_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_feature_tag();
      feature_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feature_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_track_id();
      track_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.track_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_location_data()->::mediapipe::LocationData::MergeFrom(from.location_data());
    }
    if (cached_has_bits & 0x00000008u) {
      detection_id_ = from.detection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Detection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  if (has_location_data()) {
    if (!this->location_data_->IsInitialized()) return false;
  }
  return true;
}

void Detection::Swap(Detection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Detection::InternalSwap(Detection* other) {
  using std::swap;
  label_.InternalSwap(CastToBase(&other->label_));
  label_id_.InternalSwap(&other->label_id_);
  score_.InternalSwap(&other->score_);
  CastToBase(&associated_detections_)->InternalSwap(CastToBase(&other->associated_detections_));
  display_name_.InternalSwap(CastToBase(&other->display_name_));
  feature_tag_.Swap(&other->feature_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  track_id_.Swap(&other->track_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(location_data_, other->location_data_);
  swap(detection_id_, other->detection_id_);
  swap(timestamp_usec_, other->timestamp_usec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Detection::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DetectionList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionList::kDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionList::DetectionList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_DetectionList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.DetectionList)
}
DetectionList::DetectionList(const DetectionList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      detection_(from.detection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mediapipe.DetectionList)
}

void DetectionList::SharedCtor() {
}

DetectionList::~DetectionList() {
  // @@protoc_insertion_point(destructor:mediapipe.DetectionList)
  SharedDtor();
}

void DetectionList::SharedDtor() {
}

void DetectionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DetectionList::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DetectionList& DetectionList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_DetectionList.base);
  return *internal_default_instance();
}


void DetectionList::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.DetectionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DetectionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.DetectionList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mediapipe.Detection detection = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.DetectionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.DetectionList)
  return false;
#undef DO_
}

void DetectionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.DetectionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Detection detection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->detection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.DetectionList)
}

::google::protobuf::uint8* DetectionList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.DetectionList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mediapipe.Detection detection = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->detection(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.DetectionList)
  return target;
}

size_t DetectionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.DetectionList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .mediapipe.Detection detection = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectionList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.DetectionList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.DetectionList)
    MergeFrom(*source);
  }
}

void DetectionList::MergeFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.DetectionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
}

void DetectionList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionList::CopyFrom(const DetectionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.DetectionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->detection())) return false;
  return true;
}

void DetectionList::Swap(DetectionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectionList::InternalSwap(DetectionList* other) {
  using std::swap;
  CastToBase(&detection_)->InternalSwap(CastToBase(&other->detection_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DetectionList::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WrapperHandTracking::InitAsDefaultInstance() {
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->landmarks_ = const_cast< ::mediapipe::NormalizedLandmarkList*>(
      ::mediapipe::NormalizedLandmarkList::internal_default_instance());
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->rect_ = const_cast< ::mediapipe::NormalizedRect*>(
      ::mediapipe::NormalizedRect::internal_default_instance());
  ::mediapipe::_WrapperHandTracking_default_instance_._instance.get_mutable()->detection_ = const_cast< ::mediapipe::DetectionList*>(
      ::mediapipe::DetectionList::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrapperHandTracking::kLandmarksFieldNumber;
const int WrapperHandTracking::kRectFieldNumber;
const int WrapperHandTracking::kDetectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrapperHandTracking::WrapperHandTracking()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_WrapperHandTracking.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:mediapipe.WrapperHandTracking)
}
WrapperHandTracking::WrapperHandTracking(const WrapperHandTracking& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_landmarks()) {
    landmarks_ = new ::mediapipe::NormalizedLandmarkList(*from.landmarks_);
  } else {
    landmarks_ = NULL;
  }
  if (from.has_rect()) {
    rect_ = new ::mediapipe::NormalizedRect(*from.rect_);
  } else {
    rect_ = NULL;
  }
  if (from.has_detection()) {
    detection_ = new ::mediapipe::DetectionList(*from.detection_);
  } else {
    detection_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:mediapipe.WrapperHandTracking)
}

void WrapperHandTracking::SharedCtor() {
  ::memset(&landmarks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&detection_) -
      reinterpret_cast<char*>(&landmarks_)) + sizeof(detection_));
}

WrapperHandTracking::~WrapperHandTracking() {
  // @@protoc_insertion_point(destructor:mediapipe.WrapperHandTracking)
  SharedDtor();
}

void WrapperHandTracking::SharedDtor() {
  if (this != internal_default_instance()) delete landmarks_;
  if (this != internal_default_instance()) delete rect_;
  if (this != internal_default_instance()) delete detection_;
}

void WrapperHandTracking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WrapperHandTracking::descriptor() {
  ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WrapperHandTracking& WrapperHandTracking::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::scc_info_WrapperHandTracking.base);
  return *internal_default_instance();
}


void WrapperHandTracking::Clear() {
// @@protoc_insertion_point(message_clear_start:mediapipe.WrapperHandTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(landmarks_ != NULL);
      landmarks_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rect_ != NULL);
      rect_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(detection_ != NULL);
      detection_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WrapperHandTracking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mediapipe.WrapperHandTracking)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_landmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.NormalizedRect rect = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .mediapipe.DetectionList detection = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mediapipe.WrapperHandTracking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mediapipe.WrapperHandTracking)
  return false;
#undef DO_
}

void WrapperHandTracking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mediapipe.WrapperHandTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_landmarks(), output);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_rect(), output);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_detection(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mediapipe.WrapperHandTracking)
}

::google::protobuf::uint8* WrapperHandTracking::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mediapipe.WrapperHandTracking)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_landmarks(), deterministic, target);
  }

  // optional .mediapipe.NormalizedRect rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_rect(), deterministic, target);
  }

  // optional .mediapipe.DetectionList detection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_detection(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mediapipe.WrapperHandTracking)
  return target;
}

size_t WrapperHandTracking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mediapipe.WrapperHandTracking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .mediapipe.NormalizedLandmarkList landmarks = 1;
    if (has_landmarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *landmarks_);
    }

    // optional .mediapipe.NormalizedRect rect = 2;
    if (has_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rect_);
    }

    // optional .mediapipe.DetectionList detection = 3;
    if (has_detection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *detection_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperHandTracking::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mediapipe.WrapperHandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperHandTracking* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WrapperHandTracking>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mediapipe.WrapperHandTracking)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mediapipe.WrapperHandTracking)
    MergeFrom(*source);
  }
}

void WrapperHandTracking::MergeFrom(const WrapperHandTracking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mediapipe.WrapperHandTracking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_landmarks()->::mediapipe::NormalizedLandmarkList::MergeFrom(from.landmarks());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rect()->::mediapipe::NormalizedRect::MergeFrom(from.rect());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_detection()->::mediapipe::DetectionList::MergeFrom(from.detection());
    }
  }
}

void WrapperHandTracking::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mediapipe.WrapperHandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperHandTracking::CopyFrom(const WrapperHandTracking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mediapipe.WrapperHandTracking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperHandTracking::IsInitialized() const {
  if (has_rect()) {
    if (!this->rect_->IsInitialized()) return false;
  }
  if (has_detection()) {
    if (!this->detection_->IsInitialized()) return false;
  }
  return true;
}

void WrapperHandTracking::Swap(WrapperHandTracking* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrapperHandTracking::InternalSwap(WrapperHandTracking* other) {
  using std::swap;
  swap(landmarks_, other->landmarks_);
  swap(rect_, other->rect_);
  swap(detection_, other->detection_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WrapperHandTracking::GetMetadata() const {
  protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mediapipe_2fframework_2fformats_2fwrapper_5fhand_5ftracking_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mediapipe
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Landmark* Arena::CreateMaybeMessage< ::mediapipe::Landmark >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Landmark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LandmarkList* Arena::CreateMaybeMessage< ::mediapipe::LandmarkList >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LandmarkList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::NormalizedLandmark* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmark >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::NormalizedLandmark >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::NormalizedLandmarkList* Arena::CreateMaybeMessage< ::mediapipe::NormalizedLandmarkList >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::NormalizedLandmarkList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Rect* Arena::CreateMaybeMessage< ::mediapipe::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Rect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::NormalizedRect* Arena::CreateMaybeMessage< ::mediapipe::NormalizedRect >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::NormalizedRect >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Rasterization_Interval* Arena::CreateMaybeMessage< ::mediapipe::Rasterization_Interval >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Rasterization_Interval >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Rasterization* Arena::CreateMaybeMessage< ::mediapipe::Rasterization >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Rasterization >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LocationData_BoundingBox* Arena::CreateMaybeMessage< ::mediapipe::LocationData_BoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LocationData_BoundingBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LocationData_RelativeBoundingBox* Arena::CreateMaybeMessage< ::mediapipe::LocationData_RelativeBoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LocationData_RelativeBoundingBox >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LocationData_BinaryMask* Arena::CreateMaybeMessage< ::mediapipe::LocationData_BinaryMask >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LocationData_BinaryMask >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LocationData_RelativeKeypoint* Arena::CreateMaybeMessage< ::mediapipe::LocationData_RelativeKeypoint >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LocationData_RelativeKeypoint >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::LocationData* Arena::CreateMaybeMessage< ::mediapipe::LocationData >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::LocationData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Detection_AssociatedDetection* Arena::CreateMaybeMessage< ::mediapipe::Detection_AssociatedDetection >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Detection_AssociatedDetection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::Detection* Arena::CreateMaybeMessage< ::mediapipe::Detection >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::Detection >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::DetectionList* Arena::CreateMaybeMessage< ::mediapipe::DetectionList >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::DetectionList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::mediapipe::WrapperHandTracking* Arena::CreateMaybeMessage< ::mediapipe::WrapperHandTracking >(Arena* arena) {
  return Arena::CreateInternal< ::mediapipe::WrapperHandTracking >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
